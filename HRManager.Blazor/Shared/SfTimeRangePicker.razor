@using Syncfusion.Blazor.Calendars
@namespace HRManager.Blazor.Pages.Shared

@code {
    [Parameter]
    public DateTime InitialStart { get; set; }
    [Parameter]
    public DateTime InitialEnd { get; set; }
    [Parameter]
    public bool IsModified { get; set; }
    [Parameter]
    public DateTime Start { get; set; }
    [Parameter]
    public DateTime End { get; set; }
    [Parameter]
    public bool HideEndTime { get; set; }
    [Parameter]
    public EventCallback<bool> IsModifiedChanged { get; set; }
    [Parameter]
    public EventCallback<bool> HideEndTimeChanged { get; set; }
    [Parameter]
    public EventCallback<DateTime> StartChanged { get; set; }
    [Parameter]
    public EventCallback<DateTime> EndChanged { get; set; }
    [Parameter]
    public EventCallback AvailbilityChanged { get; set; }

    private DateTime StartMin { get; set; } = DateTime.Now.Date;
    private DateTime StartMax { get; set; } = DateTime.Now.Date.AddHours(23);
    private DateTime EndMin { get; set; } = DateTime.Now.Date;
    private DateTime EndMax { get; set; } = DateTime.Now.Date.AddHours(23);

    protected override async Task OnInitializedAsync()
    {
        if (!IsModified)
        {
            Start = InitialStart;
            End = InitialEnd;
            await StartChanged.InvokeAsync(Start);
            await EndChanged.InvokeAsync(End);
        }
    }

    private async Task  StartWasChanged(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime> args)
    {
        IsModified = true;
        await IsModifiedChanged.InvokeAsync(IsModified);

        Start = args.Value;
        EndMin = Start;
        if (End < Start)
        {
            End = Start;
            await EndChanged.InvokeAsync(End);
            Start = args.Value;
        }
        await StartChanged.InvokeAsync(Start);
        await AvailbilityChanged.InvokeAsync();
    }

    private async Task EndWasChanged(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime> args)
    {
        IsModified = true;

        End = args.Value;
        StartMax = End;
        if (Start > End)
        {
            Start = End;
            await StartChanged.InvokeAsync(Start);
            End = args.Value;
        }
        await EndChanged.InvokeAsync(End);
        await AvailbilityChanged.InvokeAsync();
    }
}

<div id="range-container">
    <SfTimePicker TValue="DateTime" ID="start" Min="StartMin" Max="StartMax" Value="Start">
        <TimePickerEvents TValue="DateTime" ValueChange="StartWasChanged" />
    </SfTimePicker>
    @if (!HideEndTime)
    {
        <span id="divider">to</span>
        <SfTimePicker TValue="DateTime" ID="end" Min="EndMin" Max="EndMax" Value="End">
            <TimePickerEvents TValue="DateTime" ValueChange="EndWasChanged" />
        </SfTimePicker>
    }
</div>