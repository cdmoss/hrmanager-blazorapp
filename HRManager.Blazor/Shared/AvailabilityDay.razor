@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using System.Globalization

@code {
    [Parameter]
    public bool IsReadOnly { get; set; }
    [Parameter]
    public List<AvailabilityDto> Availabilities { get; set; }
    [Parameter]
    public DayOfWeek Day { get; set; }
    [Parameter]
    public EventCallback<List<AvailabilityDto>> AvailabilitiesChanged { get; set; }

    private void AddTime()
    {
        Availabilities.Add(new AvailabilityDto() { AvailableDay = Day });
        StateHasChanged();
    }

    private void RemoveTime(AvailabilityDto availability)
    {
        Availabilities.Remove(availability);
        StateHasChanged();
    }

    private async Task HandleAvailabilitiesChanged()
    {
        await AvailabilitiesChanged.InvokeAsync(Availabilities);
    }
}

<div id="day-container" class="mt-3">
    @foreach (var availability in Availabilities)
    {
        <div class="d-flex">
            @if (IsReadOnly)
            {
                <h6>@availability.StartTime.ToString("h:mm tt", CultureInfo.InvariantCulture)  -  @availability.EndTime.ToString("h:mm tt", CultureInfo.InvariantCulture)</h6>
            }
            else
            {
                <SfTimeRangePicker InitialStart="DateTime.Now.Date.AddHours(8)" InitialEnd="DateTime.Now.Date.AddHours(16)" @bind-Start="availability.StartTime" @bind-End="availability.EndTime" @bind-IsModified="availability.IsModified" AvailbilityChanged="HandleAvailabilitiesChanged" />
                <div id="remove" @onclick="@(rt => RemoveTime(availability))"><i class="fas fa-times"></i></div>
            }
        </div>
    }
    @if (!IsReadOnly)
    {
        <div id="btn-container" class="mt-3">
            <button type="button" id="btn-add" @onclick="AddTime" class="btn btn-sm btn-light"><i class="fas fa-plus"></i> &nbsp; Add Time</button>
        </div>
    }
</div>

