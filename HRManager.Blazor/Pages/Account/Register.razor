@layout AuthLayout
@page "/account/register"
@using HRManager.Common.Dtos
@using HRManager.Common.Auth
@using HRManager.Blazor.Services
@using HRManager.Blazor.Pages.Account.Registration
@inject NavigationManager _nav
@inject IRegistrationService _regService

@code {
    public enum RegistrationType
    {
        MemberSelf,
        MemberAdmin,
        StaffAdmin
    }

    [Parameter]
    public EventCallback<bool?> AlertRegistrationAttempt { get; set; }

    [Parameter]
    public RegistrationType Type { get; set; }

    // must create instance of model to be bound*******
    private AdminMemberDto mainDto = new AdminMemberDto();
    protected Dictionary<int, PositionSelection> positionSelection = new Dictionary<int, PositionSelection>();
    private bool isSuccessful;
    private int currentSection = 1;
    private bool loadingSubmission = false;
    private bool ShowErrors;
    private int test;
    private IEnumerable<string> Errors;


    private async Task SubmitRegistration()
    {
        loadingSubmission = true;
        if (Type == RegistrationType.StaffAdmin)
        {
            mainDto.IsStaff = true;
        }
        else
        {
            mainDto.IsStaff = false;
        }

        // handle position selection
        string positionSelectionStr = "";

        foreach (var position in positionSelection)
        {
            if (position.Value.PositionWasSelected)
            {
                positionSelectionStr += position.Key.ToString() + ",";
            }
        }
        if (!string.IsNullOrEmpty(positionSelectionStr))
        {
            positionSelectionStr = positionSelectionStr.Trim(',');
        }

        mainDto.Positions = positionSelectionStr;

        isSuccessful = await _regService.Register(mainDto);
        loadingSubmission = false;

        if (AlertRegistrationAttempt.HasDelegate)
        {
            await AlertRegistrationAttempt.InvokeAsync(isSuccessful);
        }
        else
        {
            currentSection++;
        }
    }

    private async Task TestRegistration()
    {
        mainDto.Account.Email = "test@email.com";
        mainDto.Account.Password = "P@$$W0rd";
        mainDto.Account.ConfirmPassword = "P@$$W0rd";
        mainDto.Personal.FirstName = "Test First";
        mainDto.Personal.LastName = "Test last";
        mainDto.Personal.Address = "test address";
        mainDto.Personal.City = "test city";
        mainDto.Personal.MainPhone = "5555555555";
        mainDto.Personal.Birthdate = DateTime.Now;
        mainDto.Personal.EmergencyPhone1 = "5555555555";
        mainDto.Personal.EmergencyRelationship = "test relationship";
        mainDto.Personal.EmergencyFullName = "test emerg name";
        mainDto.Personal.PostalCode = "t5t5t5";

        loadingSubmission = true;
        currentSection = 7;
        isSuccessful = await _regService.Register(mainDto);
        loadingSubmission = false;
    }

    private void HandleSectionCompleted()
    {
        // if a staff member is being registered, skip positions section
        if (Type == RegistrationType.StaffAdmin && currentSection == 2)
        {
            currentSection += 2;
        }
        else
        {
            currentSection++;
        }

        StateHasChanged();
    }

    private void HandlePreviousSectionRequested()
    {
        // if a staff member is being registered, skip positions section
        if (Type == RegistrationType.StaffAdmin && currentSection == 4)
        {
            currentSection -= 2;
        }
        else
        {
            currentSection--;
        }

        StateHasChanged();
    }
}

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}

@switch (currentSection)
{
    case 0:
        _nav.NavigateTo("/");
        break;
    case 1:
        <AccountCreds Type="Type" @bind-AccountData="mainDto" SectionCompleted="HandleSectionCompleted" PreviousSectionRequested="HandlePreviousSectionRequested" />
        break;
    case 2:
        <PersonalAndContact Type="Type" @bind-PersonalData="mainDto" SectionCompleted="HandleSectionCompleted" PreviousSectionRequested="HandlePreviousSectionRequested" />
        break;
    case 3:
        <PreferredPositions Type="Type" @bind-PositionSelection="positionSelection" SectionCompleted="HandleSectionCompleted" PreviousSectionRequested="HandlePreviousSectionRequested" />
        break;
    case 4:
        <Availability Type="Type" @bind-AvailabilitiesData="mainDto.Availabilities" SectionCompleted="HandleSectionCompleted" PreviousSectionRequested="HandlePreviousSectionRequested" />
        break;
    case 5:
        <Qualifications Type="Type" @bind-QualificationsData="mainDto.Qualifications" SectionCompleted="HandleSectionCompleted" PreviousSectionRequested="HandlePreviousSectionRequested" />
        break;
    case 6:
        <Certificates Type="Type" @bind-CertData="mainDto" SectionCompleted="HandleSectionCompleted" PreviousSectionRequested="HandlePreviousSectionRequested" />
        break;
    case 7:
        <Submit SectionCompleted="SubmitRegistration" PreviousSectionRequested="HandlePreviousSectionRequested" />
        break;
    case 8:
        if (loadingSubmission)
        {
            <p>Waiting for your application to be verified...</p>
        }
        else
        {
            <Result Type="Type" IsSuccessful="isSuccessful" />
        }
        break;
}

@if (currentSection != 7)
{
    <RegisterSectionButtonContainer  PreviousSectionRequested="HandlePreviousSectionRequested" Progress="@currentSection" />
}

@*<button @onclick="TestRegistration">Test Registration</button>*@
